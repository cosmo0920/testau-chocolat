#!/usr/bin/env python
import pdb
import argparse
import yaml
import subprocess
import gateauchocolat

logger = gateauchocolat.QuickLogger()

class AnsibleController(object):
    def __init__(self, args):
        self.__args = args
        self.__catalog = yaml.load(args.catalog_file)
        if args.spec_file is None:
            spec_filename = self.__catalog["spec_file"]
            logger.info("Spec. file: %s" % spec_filename)
            args.spec_file = open(spec_filename)
        self.__spec = yaml.load(args.spec_file)

    def __call__(self):
        self.__listup_machines()

    def __listup_machines(self):
        for machine_name, ip_addrs in self.__catalog["machines"].items():
            if len(ip_addrs) == 0:
                raise AssertionError("Not found: IP address: %s"  %
                                     machine_name)
            self.__setup_with_ansible(machine_name, ip_addrs)


    def __setup_with_ansible(self, name, ip_addrs):
        if len(ip_addrs) > 1:
            raise AssertionError("Not supprted: multiple IP addresses: %s"
                                 % name)
        ip_addr = ip_addrs[0]
        hosts_file_path = name
        self.__create_hosts_file(hosts_file_path, ip_addr)
        for component_name in self.__spec["machines"][name]["components"]:
            logger.info("Start setup: %s, component: %s"
                        % (name, component_name))
            playbook_path = self.__get_playbook_path(component_name)
            self.__run_ansible_playbook(hosts_file_path, playbook_path)

    def __create_hosts_file(self, path, ip_addr):
        with open(path, "w") as f:
            content = "%s" % ip_addr
            f.write(content)
        logger.info("Created hosts file: %s" % path)

    def __get_playbook_path(self, name):
        return self.__args.playbook_dir + "/" + name + ".yaml"

    def __run_ansible_playbook(self, host_file, playbook):
        login_user = "centos" # TODO: read from the spec. file
        cmd = ["ansible-playbook", "-i", host_file, "-u", login_user, playbook]
        proc = subprocess.Popen(cmd).communicate()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--spec-file", type=file)
    parser.add_argument("-a", "--playbook-dir", type=str, default="./",
                        help="Ansbile playbook directory")
    parser.add_argument("catalog_file", type=file, help="A catalog file, typically generated by deploy-on-openstack.py")
    args = parser.parse_args()
    controller = AnsibleController(args)
    controller()
